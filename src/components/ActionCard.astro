---
interface Props {
  title: string;
  description: string;
  eventDate: Date;
  location: string;
  type: string;
  virtual: boolean;
  registrationUrl?: string;
  slug: string;
  compact?: boolean;
}

const { title, description, eventDate, location, type, virtual, registrationUrl, slug, compact = false } = Astro.props;

// Calculate event status
const today = new Date();
today.setHours(0, 0, 0, 0);
const eventDay = new Date(eventDate);
eventDay.setHours(0, 0, 0, 0);

let status: 'past' | 'today' | 'upcoming' = 'upcoming';
if (eventDay < today) {
  status = 'past';
} else if (eventDay.getTime() === today.getTime()) {
  status = 'today';
}

// Format date
const dateFormatter = new Intl.DateTimeFormat('en-US', {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

const statusColors = {
  past: 'bg-gray-100 text-gray-600',
  today: 'bg-green-100 text-green-800',
  upcoming: 'bg-blue-100 text-blue-800'
};

const typeColors = {
  workshop: 'bg-purple-100 text-purple-800',
  conference: 'bg-yellow-100 text-yellow-800',
  training: 'bg-pink-100 text-pink-800',
  research: 'bg-indigo-100 text-indigo-800',
  consultancy: 'bg-cyan-100 text-cyan-800',
  other: 'bg-gray-100 text-gray-800'
} as const;

type ActivityType = keyof typeof typeColors;
const activityType = type as ActivityType;
---

<div class={`bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow ${compact ? 'p-4' : 'p-6'}`}>
  <div class={`flex flex-wrap items-center justify-between ${compact ? 'mb-2' : 'mb-4'}`}>
    <div class="flex flex-wrap items-center gap-2">
      <!-- Status Badge -->
      <span class={`px-2 py-0.5 rounded-full text-sm font-medium ${statusColors[status]}`}>
        {status === 'past' ? 'Past Event' : status === 'today' ? 'Today' : 'Upcoming'}
      </span>
      <!-- Type Badge -->
      <span class={`px-2 py-0.5 rounded-full text-sm font-medium ${typeColors[activityType]}`}>
        {type}
      </span>
      <!-- Virtual Badge -->
      {virtual && (
        <span class="px-2 py-0.5 bg-teal-100 text-teal-800 rounded-full text-sm font-medium">
          Virtual
        </span>
      )}
    </div>
    <div class="flex items-center gap-2 text-sm text-gray-500">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
      </svg>
      <span>{dateFormatter.format(eventDate)}</span>
    </div>
  </div>

  <div class="flex items-start justify-between gap-4">
    <div>
      <h3 class={`font-semibold text-gray-900 ${compact ? 'text-lg mb-1' : 'text-xl mb-2'}`}>
        <a href={`/actions/${slug}`} class="hover:text-blue-600 transition-colors">
          {title}
        </a>
      </h3>
      <p class={`text-gray-600 ${compact ? 'text-sm' : ''}`}>{description}</p>
    </div>

    {registrationUrl && registrationUrl.length > 0 && status !== 'past' && (
      <a
        href={registrationUrl}
        class="flex-shrink-0 inline-flex items-center px-3 py-1 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition-colors text-sm"
      >
        {status === 'today' ? 'Join Now' : 'Register'}
        <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
        </svg>
      </a>
    )}
  </div>

  <div class="flex items-center gap-2 mt-2 text-sm text-gray-500">
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
    </svg>
    <span>{location}</span>
  </div>
</div> 